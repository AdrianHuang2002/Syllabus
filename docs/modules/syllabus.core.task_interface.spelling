modules/syllabus.core.task_interface.rst:6: (intialization)  Each environment will define tasks in a different way. A "task" might be the environment seed, an intialization argument, or an entirely different subclass. The 
../../syllabus/core/task_interface/environment_task_env.py:docstring of syllabus.core.task_interface.environment_task_env.TaskEnv.change_task:7: (init)  If you need to reset or re-init the environment here, make sure to check
../../syllabus/core/task_interface/reinit_task_wrapper.py:docstring of syllabus.core.task_interface.reinit_task_wrapper.ReinitTaskWrapper:1: (subclasses)  This is a general wrapper for tasks defined as subclasses of a base environment.
../../syllabus/core/task_interface/reinit_task_wrapper.py:docstring of syllabus.core.task_interface.reinit_task_wrapper.ReinitTaskWrapper:3: (reinitializes)  This wrapper reinitializes the environment with the provided env function at the start of each episode.
../../syllabus/core/task_interface/reinit_task_wrapper.py:docstring of syllabus.core.task_interface.reinit_task_wrapper.ReinitTaskWrapper:3: (env)  This wrapper reinitializes the environment with the provided env function at the start of each episode.
../../syllabus/core/task_interface/reinit_task_wrapper.py:docstring of syllabus.core.task_interface.reinit_task_wrapper.ReinitTaskWrapper.decode_task:1: (reinit)  Override to convert element of the MultiDiscrete task space into format usable by the reinit env_fn.
../../syllabus/core/task_interface/reinit_task_wrapper.py:docstring of syllabus.core.task_interface.reinit_task_wrapper.ReinitTaskWrapper.decode_task:1: (env)  Override to convert element of the MultiDiscrete task space into format usable by the reinit env_fn.
../../syllabus/core/task_interface/reinit_task_wrapper.py:docstring of syllabus.core.task_interface.reinit_task_wrapper.ReinitTaskWrapper.decode_task:1: (fn)  Override to convert element of the MultiDiscrete task space into format usable by the reinit env_fn.
../../syllabus/core/task_interface/subclass_task_wrapper.py:docstring of syllabus.core.task_interface.subclass_task_wrapper.SubclassTaskWrapper:1: (subclasses)  This is a general wrapper for tasks defined as subclasses of a base environment.
../../syllabus/core/task_interface/subclass_task_wrapper.py:docstring of syllabus.core.task_interface.subclass_task_wrapper.SubclassTaskWrapper:3: (reinitializes)  This wrapper reinitializes the environment with the provided env function at the start of each episode.
../../syllabus/core/task_interface/subclass_task_wrapper.py:docstring of syllabus.core.task_interface.subclass_task_wrapper.SubclassTaskWrapper:3: (env)  This wrapper reinitializes the environment with the provided env function at the start of each episode.
../../syllabus/core/task_interface/task_wrapper.py:docstring of syllabus.core.task_interface.task_wrapper.TaskWrapper.change_task:7: (init)  If you need to reset or re-init the environment here, make sure to check
../../syllabus/core/task_interface/task_wrapper.py:docstring of syllabus.core.task_interface.task_wrapper.TaskWrapper.step:1: (timestep)  Run one timestep of the environment's dynamics. When end of
