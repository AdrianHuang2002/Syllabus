modules/syllabus.examples.rst:5: (Subpackages)  Subpackages
modules/syllabus.examples.rst:14: (Submodules)  Submodules
../../syllabus/examples/cleanrl_procgen.py:docstring of syllabus.examples.cleanrl_procgen.ConvSequence.forward:3: (subclasses)  Should be overridden by all subclasses.
../../syllabus/examples/cleanrl_procgen.py:docstring of syllabus.examples.cleanrl_procgen.ResidualBlock.forward:3: (subclasses)  Should be overridden by all subclasses.
../../syllabus/examples/cleanrl_procgen_plr.py:docstring of syllabus.examples.cleanrl_procgen_plr:1: (Procgen)  An example applying Syllabus Prioritized Level Replay to Procgen. This code is based on 
../../syllabus/examples/cleanrl_procgen_plr.py:docstring of syllabus.examples.cleanrl_procgen_plr:3: (reinitializing)  NOTE: In order to efficiently change the seed of a procgen environment directly without reinitializing it,
../../syllabus/examples/cleanrl_procgen_plr.py:docstring of syllabus.examples.cleanrl_procgen_plr:4: (Minqi)  we rely on Minqi Jiang's custom branch of procgen found here: 
../../syllabus/examples/cleanrl_procgen_plr.py:docstring of syllabus.examples.cleanrl_procgen_plr:4: (Jiang)  we rely on Minqi Jiang's custom branch of procgen found here: 
../../syllabus/examples/torchbeast_nethack.py:docstring of syllabus.examples.torchbeast_nethack.Crop.forward:2: (Args)  Args:
../../syllabus/examples/torchbeast_nethack.py:docstring of syllabus.examples.torchbeast_nethack.NetHackNet.forward:3: (subclasses)  Should be overridden by all subclasses.
../../syllabus/examples/torchbeast_nethack.py:docstring of syllabus.examples.torchbeast_nethack.RandomNet.forward:3: (subclasses)  Should be overridden by all subclasses.
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnv:1: (vectorized)  An abstract asynchronous, vectorized environment.
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnv.reset:4: (async)  If step_async is still doing work, that work will
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnv.reset:5: (cancelled)  be cancelled and step_wait() should not be called
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnv.reset:6: (async)  until step_async() is invoked again.
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnv.step_async:5: (async)  You should not call this if a step_async run is
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnv.step_wait:1: (async)  Wait for the step taken with step_async().
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnv.step_wait:7: (rews)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnv.step_wait:7: (dones)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnv.step_wait:7: (infos)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnv.step_wait:6: (rews)  rews: an array of rewards
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnv.step_wait:7: (dones)  dones: an array of "episode done" booleans
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnv.step_wait:7: (booleans)  dones: an array of "episode done" booleans
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnv.step_wait:8: (infos)  infos: a sequence of info objects
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvObservationWrapper.reset:4: (async)  If step_async is still doing work, that work will
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvObservationWrapper.reset:5: (cancelled)  be cancelled and step_wait() should not be called
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvObservationWrapper.reset:6: (async)  until step_async() is invoked again.
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvObservationWrapper.step_wait:1: (async)  Wait for the step taken with step_async().
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvObservationWrapper.step_wait:7: (rews)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvObservationWrapper.step_wait:7: (dones)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvObservationWrapper.step_wait:7: (infos)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvObservationWrapper.step_wait:6: (rews)  rews: an array of rewards
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvObservationWrapper.step_wait:7: (dones)  dones: an array of "episode done" booleans
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvObservationWrapper.step_wait:7: (booleans)  dones: an array of "episode done" booleans
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvObservationWrapper.step_wait:8: (infos)  infos: a sequence of info objects
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvWrapper.reset:4: (async)  If step_async is still doing work, that work will
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvWrapper.reset:5: (cancelled)  be cancelled and step_wait() should not be called
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvWrapper.reset:6: (async)  until step_async() is invoked again.
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvWrapper.step_async:5: (async)  You should not call this if a step_async run is
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvWrapper.step_wait:1: (async)  Wait for the step taken with step_async().
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvWrapper.step_wait:7: (rews)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvWrapper.step_wait:7: (dones)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvWrapper.step_wait:7: (infos)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvWrapper.step_wait:6: (rews)  rews: an array of rewards
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvWrapper.step_wait:7: (dones)  dones: an array of "episode done" booleans
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvWrapper.step_wait:7: (booleans)  dones: an array of "episode done" booleans
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecEnvWrapper.step_wait:8: (infos)  infos: a sequence of info objects
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecMonitor.reset:4: (async)  If step_async is still doing work, that work will
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecMonitor.reset:5: (cancelled)  be cancelled and step_wait() should not be called
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecMonitor.reset:6: (async)  until step_async() is invoked again.
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecMonitor.step_wait:1: (async)  Wait for the step taken with step_async().
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecMonitor.step_wait:7: (rews)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecMonitor.step_wait:7: (dones)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecMonitor.step_wait:7: (infos)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecMonitor.step_wait:6: (rews)  rews: an array of rewards
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecMonitor.step_wait:7: (dones)  dones: an array of "episode done" booleans
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecMonitor.step_wait:7: (booleans)  dones: an array of "episode done" booleans
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecMonitor.step_wait:8: (infos)  infos: a sequence of info objects
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecNormalize:1: (vectorized)  A vectorized wrapper that normalizes the observations
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecNormalize.reset:4: (async)  If step_async is still doing work, that work will
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecNormalize.reset:5: (cancelled)  be cancelled and step_wait() should not be called
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecNormalize.reset:6: (async)  until step_async() is invoked again.
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecNormalize.step_wait:1: (async)  Wait for the step taken with step_async().
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecNormalize.step_wait:7: (rews)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecNormalize.step_wait:7: (dones)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecNormalize.step_wait:7: (infos)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecNormalize.step_wait:6: (rews)  rews: an array of rewards
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecNormalize.step_wait:7: (dones)  dones: an array of "episode done" booleans
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecNormalize.step_wait:7: (booleans)  dones: an array of "episode done" booleans
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecNormalize.step_wait:8: (infos)  infos: a sequence of info objects
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecPyTorchProcgen.reset:4: (async)  If step_async is still doing work, that work will
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecPyTorchProcgen.reset:5: (cancelled)  be cancelled and step_wait() should not be called
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecPyTorchProcgen.reset:6: (async)  until step_async() is invoked again.
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecPyTorchProcgen.step_async:5: (async)  You should not call this if a step_async run is
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecPyTorchProcgen.step_wait:1: (async)  Wait for the step taken with step_async().
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecPyTorchProcgen.step_wait:7: (rews)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecPyTorchProcgen.step_wait:7: (dones)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecPyTorchProcgen.step_wait:7: (infos)  Returns (obs, rews, dones, infos):
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecPyTorchProcgen.step_wait:6: (rews)  rews: an array of rewards
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecPyTorchProcgen.step_wait:7: (dones)  dones: an array of "episode done" booleans
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecPyTorchProcgen.step_wait:7: (booleans)  dones: an array of "episode done" booleans
../../syllabus/examples/vecenv.py:docstring of syllabus.examples.vecenv.VecPyTorchProcgen.step_wait:8: (infos)  infos: a sequence of info objects
../../syllabus/examples/vtrace.py:docstring of syllabus.examples.vtrace:5: (Scalable)  "IMPALA: Scalable Distributed Deep-RL with
../../syllabus/examples/vtrace.py:docstring of syllabus.examples.vtrace:5: (RL)  "IMPALA: Scalable Distributed Deep-RL with
../../syllabus/examples/vtrace.py:docstring of syllabus.examples.vtrace:7: (Espeholt)  by Espeholt, Soyer, Munos et al.
../../syllabus/examples/vtrace.py:docstring of syllabus.examples.vtrace:7: (Soyer)  by Espeholt, Soyer, Munos et al.
../../syllabus/examples/vtrace.py:docstring of syllabus.examples.vtrace:7: (Munos)  by Espeholt, Soyer, Munos et al.
../../syllabus/examples/vtrace.py:docstring of syllabus.examples.vtrace:7: (et)  by Espeholt, Soyer, Munos et al.
../../syllabus/examples/vtrace.py:docstring of syllabus.examples.vtrace:7: (al)  by Espeholt, Soyer, Munos et al.
../../syllabus/examples/vtrace.py:docstring of syllabus.examples.vtrace.from_logits:1: (softmax)  V-trace for softmax policies.
