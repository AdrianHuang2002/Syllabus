modules/syllabus.core.rst:11: (vectorized)  If your environment is vectorized with python multiprocessing (this is true for most libraries, including CleanRL, Stable Baselines 3, and Torchbeast) then you can wrap your curriculum and environment as follows:
modules/syllabus.core.rst:11: (Torchbeast)  If your environment is vectorized with python multiprocessing (this is true for most libraries, including CleanRL, Stable Baselines 3, and Torchbeast) then you can wrap your curriculum and environment as follows:
modules/syllabus.core.rst:19: (vectorized)  If your environment is vectorized by Ray (e.g. RLLib) then you can wrap your environment as follows:
../../syllabus/core/curriculum_sync_wrapper.py:docstring of syllabus.core.curriculum_sync_wrapper.RayCurriculumWrapper:5: (subclasses)  overridden here to the remote curriculum. This is intended to forward private functions of Curriculum subclasses
../../syllabus/core/curriculum_sync_wrapper.py:docstring of syllabus.core.curriculum_sync_wrapper.remote_call:3: (parallelization)  Note that this causes functions to block, and should be only used for operations that do not require parallelization.
../../syllabus/core/environment_sync_wrapper.py:docstring of syllabus.core.environment_sync_wrapper.MultiProcessingSyncWrapper.step:1: (timestep)  Run one timestep of the environment's dynamics. When end of
../../syllabus/core/environment_sync_wrapper.py:docstring of syllabus.core.environment_sync_wrapper.RaySyncWrapper.change_task:7: (init)  If you need to reset or re-init the environment here, make sure to check
../../syllabus/core/environment_sync_wrapper.py:docstring of syllabus.core.environment_sync_wrapper.RaySyncWrapper.step:1: (timestep)  Run one timestep of the environment's dynamics. When end of
../../syllabus/core/multivariate_curriculum_wrapper.py:docstring of syllabus.core.multivariate_curriculum_wrapper.MultitaskWrapper:1: (subspaces)  Uniform sampling for task spaces with multiple subspaces (Tuple or Dict)
